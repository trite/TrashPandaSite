@using Data.Calendar
@using TriteUtilities.Azure.Blob
@using System.Text.Json
@inject BlobStorageService blobStorageService

@*<div class="calendarTitleBar">
    <button class="calendarPaginationButton" @onclick="PreviousMonth">Prev</button>
    <h2 class="text-light">@MonthName</h2>
    <button class="calendarPaginationButton" @onclick="NextMonth">Next</button>
</div>*@

<div class="calendarContainer">
    <button class="calendarPaginationButton" @onclick="PreviousMonth">Prev</button>
    <div class="monthName">@MonthName</div>
    <button class="calendarPaginationButton" @onclick="NextMonth">Next</button>

    <div class="calendarDayHeader">Sun</div>
    <div class="calendarDayHeader">Mon</div>
    <div class="calendarDayHeader">Tue</div>
    <div class="calendarDayHeader">Wed</div>
    <div class="calendarDayHeader">Thu</div>
    <div class="calendarDayHeader">Fri</div>
    <div class="calendarDayHeader">Sat</div>

    @foreach (var week in Weeks)
    {
        <WeekComponent weekInfo="@week" />
    }
</div>

@*<table class="table table-bordered table-dark">
    <thead>
        <tr class="calendar-tr">
            <th class="text-center calendar-th" scope="col">Sun</th>
            <th class="text-center calendar-th" scope="col">Mon</th>
            <th class="text-center calendar-th" scope="col">Tue</th>
            <th class="text-center calendar-th" scope="col">Wed</th>
            <th class="text-center calendar-th" scope="col">Thu</th>
            <th class="text-center calendar-th" scope="col">Fri</th>
            <th class="text-center calendar-th" scope="col">Sat</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var week in Weeks)
        {
            <WeekComponent weekInfo="@week" />
        }
    </tbody>
</table>*@

@code {
    bool Walk(DateTime first, DateTime second)
    {
        return !(first.Day == second.Day &&
               first.Month == second.Month &&
               first.Year == second.Year);
    }

    [Parameter]
    public List<WeekInfo> Weeks { get; set; }

    [Parameter]
    public string MonthName { get; set; }

    [Parameter]
    public DateTime TargetMonth { get; set; } = DateTime.Now;

    public string JsonTest { get; set; }

    public CalendarComponent()
    {
        int year = 2021;
        int month = 9;
        TargetMonth = new(year, month, 1);
        Render();
    }

    public void PreviousMonth()
    {
        TargetMonth = TargetMonth.AddMonths(-1);
        Render();
    }

    public void NextMonth()
    {
        TargetMonth = TargetMonth.AddMonths(1);
        Render();
    }

    //private List<ICalendarEvent> GetCalendarEvents(int year, int month)
    //{
    //    string containerName = $"calendar";
    //    string blobName = $"events_{year}-{month}";
    //    // Option<string> eventsBlob = BlobStorageService.ReadBlob("TrashPandaConn", "calendar", blobName);
    //    // eventsBlob.Map(b => )

    //    throw new NotImplementedException("need to finish this still");
    //    // TODO: finish this
    //}

    private Option<Dictionary<int, List<CalendarEvent>>> GetCalendarEvents(int year, int month)
    {
        string containerName = "calendar";
        string blobName = $"events_{year}-{month}";
        Option<string> eventsBlob = BlobStorageService.ReadBlob("TrashPandaConn", containerName, blobName);
        return eventsBlob.Map(b => JsonSerializer.Deserialize<Dictionary<int, List<CalendarEvent>>>(b));
    }

    //private Option<List<CalendarEvent>> GetDayEvents(Dictionary<int, List<CalendarEvent>> events, Option<int> day) =>
    //    day.Map(d =>
    //    {
    //        if (events.ContainsKey(d))
    //        {
    //            return events[d];
    //        }
    //    }
    //    );

    private void Render()
    {
        var year = TargetMonth.Year;
        var month = TargetMonth.Month;
        DateTime monthStart = new(year, month, 1);
        MonthName = monthStart.ToString("MMMM yyyy");
        DateTime calendarStart = monthStart.AddDays(-(int)monthStart.DayOfWeek);
        int lastDayOfMonthInt = DateTime.DaysInMonth(year, month);
        DateTime monthEnd = new(year, month, lastDayOfMonthInt);
        DateTime calendarEnd = monthEnd.AddDays(6 - (int)monthEnd.DayOfWeek);
        DateTime stopDate = calendarEnd.AddDays(1);

        List<WeekInfo> weeks = new();
        WeekInfo currentWeek = new();

        DateTime walk = new(calendarStart.Year, calendarStart.Month, calendarStart.Day);
        var monthCalendarEvents = GetCalendarEvents(year, month);

        while (Walk(walk, stopDate))
        {
            DayInfo dayInfo = new()
            {
                Date = walk,
                IsCurrentMonth = walk.Date.Month == month,
                CalendarEvents = monthCalendarEvents.Map(dict =>
                {
                    //if (dict.ContainsKey(walk.Day))
                    //{
                    //    return dict[walk.Day];
                    //}
                    //return new List<CalendarEvent>();
                    var temp = new List<CalendarEvent>();
                    
                    if (walk.DayOfWeek == DayOfWeek.Tuesday || walk.DayOfWeek == DayOfWeek.Thursday)
                    {
                        temp.Add(new CalendarEvent()
                        {
                            Details = "Raid night",
                            Description = "Raid night",
                            EventType = CalendarEventType.Raid
                        });
                    }

                    if (dict.ContainsKey(walk.Day))
                    {
                        foreach (var e in dict[walk.Day])
                        {
                            temp.Add(e);
                        }
                    }

                    return temp;
                })
                .IfNone(() => new List<CalendarEvent>())
            };



            //DayInfo dayInfo = new()
            //{
            //    Date = walk,
            //    IsCurrentMonth = walk.Date.Month == month,
            //    CalendarEvents = new()
            //};

            //if (walk.Day == 15)
            //{
            //    dayInfo.CalendarEvents.Add(new CalendarEvent()
            //    {
            //        Description = "Hunter#3 - late",
            //        Details = "Hunter#3 is late because reasons and stuff",
            //        EventType = CalendarEventType.AttendanceLate,
            //        Person = "Hunter#3"
            //    });
            //    dayInfo.CalendarEvents.Add(new CalendarEvent()
            //    {
            //        Description = "Druid#2 - absent",
            //        Details = "Druid#2 is missing the raid because reasons and stuff",
            //        EventType = CalendarEventType.AttendanceAbsent,
            //        Person = "Druid#2"
            //    });
            //}

            currentWeek.SetDayInfo(walk.DayOfWeek, dayInfo);

            if (walk.DayOfWeek == DayOfWeek.Saturday)
            {
                weeks.Add(currentWeek);
                currentWeek = new();
            }

            walk = walk.AddDays(1);
        }

        Weeks = weeks;

        // TODO: remove later, hanging onto this for reference temporarily
        //Dictionary<int, List<CalendarEvent>> monthEventsTest = new();
        //monthEventsTest.Add(15, new());

        //monthEventsTest[15].Add(new()
        //{
        //    Description = "Hunter#3 - late",
        //    Details = "Hunter#3 is late because reasons and stuff",
        //    EventType = CalendarEventType.AttendanceLate,
        //    Person = "Hunter#3"
        //});

        //monthEventsTest[15].Add(new()
        //{
        //    Description = "Druid#2 - absent",
        //    Details = "Druid#2 is missing the raid because reasons and stuff",
        //    EventType = CalendarEventType.AttendanceAbsent,
        //    Person = "Druid#2"
        //});

        //monthEventsTest[15].Add(new()
        //{
        //    Description = "Raid night",
        //    Details = "Raid night",
        //    EventType = CalendarEventType.Raid,
        //    Person = ""
        //});

        //monthEventsTest.Add(8, new());

        //monthEventsTest[8].Add(new()
        //{
        //    Description = "Raid night",
        //    Details = "Raid night",
        //    EventType = CalendarEventType.Raid,
        //    Person = ""
        //});

        //JsonTest = JsonSerializer.Serialize(monthEventsTest);

        //string blobName = $"events_{year}-{month}";
        //BlobStorageService.WriteBlob("TrashPandaConn", "calendar", blobName, JsonTest);
        //    // .ReadBlob("TrashPandaConn", containerName, blobName);
        //var test = JsonSerializer.Deserialize<Dictionary<int, List<CalendarEvent>>>(JsonTest);
    }
}
